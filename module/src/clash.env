# 警告：以下核心配置不要轻易修改，否则无法启动！

# 核心系统配置
pref_id="5000"
mark_id="2025"
table_id="2025"

%
# 路径配置
data_dir="/data/clash"
run_path="${data_dir}/run"
bin_path="${data_dir}/bin"
scripts_dir="${data_dir}/scripts"
Module_data_path="/data/adb/modules/akashaProxy"

# 二进制文件
kernel_bin="${data_dir}/kernel/${bin_name}"

# 配置文件
config_file="${data_dir}/config.yaml"
temporary_config_file="${run_path}/config.yaml"
rule_file="${data_dir}/rule.yaml"

# 数据文件
GeoSite_file="${data_dir}/GeoSite.dat"
appuid_file="${run_path}/appuid.list"
filter_packages_file="${data_dir}/packages.list"
system_packages_file="/data/system/packages.list"

# 日志文件
logs_file="${run_path}/run.logs"
OldLogs_file="${run_path}/run.old.logs"

# 系统环境配置
export PATH="${bin_path}:/data/adb/ap/bin:/data/adb/ksu/bin:/data/adb/magisk:$PATH"
Cgroup_memory_path=""
chmod -R 6755 "${data_dir}/kernel"


# 配置文件解析
geodata_mode="$(yamlcli -f "${config_file}" get 'geodata-mode')"
ipv6="$(yamlcli -f "${config_file}" get 'ipv6')"
Geo_auto_update="$(yamlcli -f "${config_file}" get 'geo-auto-update')"
Module_version="$(grep "^version" ${Module_data_path}/module.prop | awk -F '=' '{print $2}')"

# 端口配置
kernel_enhanced_mode="$(yamlcli -f "${config_file}" get 'dns.enhanced-mode')"
tproxy_port="$(yamlcli -f "${config_file}" get 'tproxy-port')"
redirect_port="$(yamlcli -f "${config_file}" get 'redir-port')"
dns_status="$(yamlcli -f "${config_file}" get 'dns.enable')"
dns_port="$(yamlcli -f "${config_file}" get 'dns.listen' | awk -F ':' '{print $2}')"
kernel_ui_port="$(yamlcli -f "${config_file}" get 'external-controller')"
kernel_ui_secret="$(yamlcli -f "${config_file}" get 'secret')"
tun_status="$(yamlcli -f "${config_file}" get 'tun.enable')"
auto_route="$(yamlcli -f "${config_file}" get 'tun.auto-route')"
tun_line="$(grep -n "tun:" ${config_file} | grep -v "#" | awk -F ':' '{print $1}')"
tun_device="$(yamlcli -f "${config_file}" get 'tun.device')"
GeoIP_dat_url="$(yamlcli -f "${config_file}" get 'geox-url.geoip')"
Country_mmdb_url="$(yamlcli -f "${config_file}" get 'geox-url.mmdb')"
GeoSite_url="$(yamlcli -f "${config_file}" get 'geox-url.geosite')"


# 默认值设置
if [ -z "${ipv6}" ]; then
    ipv6="false"
fi

if [ -z "${GeoIP_dat_url}" ]; then
    GeoIP_dat_url="https://jsd.onmicrosoft.cn/gh/Loyalsoldier/geoip@release/geoip.dat"
fi

if [ -z "${Country_mmdb_url}" ]; then
    Country_mmdb_url="https://jsd.onmicrosoft.cn/gh/Loyalsoldier/geoip@release/Country.mmdb"
fi

if [ -z "${GeoSite_url}" ]; then
    GeoSite_url="https://jsd.onmicrosoft.cn/gh/Loyalsoldier/v2ray-rules-dat@release/geosite.dat"
fi
if [ -z "${tun_status}" ]; then
    tun_status="false"
fi

if [ -z "${auto_route}" ]; then
    auto_route="false"
fi

if [ -z "${tun_device}" ]; then
    tun_device="Meta"
fi

if [ -n "${geodata_mode}" ]; then
    GeoIP_file="${data_dir}/GeoIP.dat"
    GeoIP_url=${GeoIP_dat_url}
else
    GeoIP_file="${data_dir}/Country.mmdb"
    GeoIP_url=${Country_mmdb_url}
fi

if busybox zcat /proc/config.gz | grep TPROXY=y >/dev/null 2>&1 ; then
    support_tproxy="true"
else
    support_tproxy="false"
fi

if [ "${adguardhome}" = "true" ]; then
    dns_status="false"
    if [ "${adguardhome_config_file}" = "" ] && [ ! -f "${adguardhome_config_file}" ]; then
        adguardhome_config_file=$(find /data/adb -type f -name "AdGuardHome.yaml" | head -n 1)
    fi
fi

if [ "${adguardhome_iptables}" = "true" ] || [ "${adguardhome}" = "true" ]; then
    dns_status="true"
    dns_port="$(yamlcli -f "${adguardhome_config_file}" get 'dns.port')"
fi
# 网络配置
kernel_permissions="6755"
kernel_user_group="root:net_admin"
kernel_user=$(echo ${kernel_user_group} | awk -F ':' '{print $1}')
kernel_group=$(echo ${kernel_user_group} | awk -F ':' '{print $2}')
ip6tables_wait="ip6tables -w 100"

# 保留IP地址段
reserved_ip="0.0.0.0/8 10.0.0.0/8 100.0.0.0/8 127.0.0.0/8 169.254.0.0/16 192.0.0.0/24 192.0.2.0/24 192.88.99.0/24 192.168.0.0/16 198.51.100.0/24 203.0.113.0/24 224.0.0.0/4 240.0.0.0/4 255.255.255.255/32"

reserved_ip6="::/128 ::1/128 ::ffff:0:0/96 100::/64 64:ff9b::/96 2001::/32 2001:10::/28 2001:20::/28 2001:db8::/32 2002::/16 fe80::/10 ff00::/8"


# 日志函数
log() {
    timestamp="[`TZ=Asia/Shanghai date "+%H:%M:%S"`]"
    full_timestamp="[`TZ=Asia/Shanghai date "+%Y-%m-%d %H:%M:%S"`]"

    if [ "$old_logs" = "true" ]; then
        echo "${timestamp}$1" >> "${logs_file}"
        echo "${full_timestamp}$1" >> "${OldLogs_file}"
    else
        echo "${timestamp}$1" >> "${logs_file}"
    fi
    echo "$1"
}

iptables_wait() {
    local is_ipv4=false
    local is_ipv6=false
    local has_ip_pattern=false
    local arg

    for arg in "$@"; do
        case "$arg" in
            *.*.*.*)
                is_ipv4=true
                has_ip_pattern=true
                ;;
            *:*:*)
                is_ipv6=true
                has_ip_pattern=true
                ;;
        esac
    done

    if [ "$has_ip_pattern" = "false" ]; then
        is_ipv4=true
        if [ "$ipv6" = "true" ]; then
            is_ipv6=true
        fi
    fi

    if [ "$is_ipv4" = "true" ]; then
        iptables -w 100 "$@"
    fi

    if [ "$is_ipv6" = "true" ] && [ "$ipv6" = "true" ]; then
        ip6tables -w 100 "$@"
    fi
}